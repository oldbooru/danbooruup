<?xml version="1.0"?>

<!DOCTYPE overlay [
<!ENTITY % danbooruUpOptionsDTD SYSTEM "chrome://danbooruup/locale/danbooruUpOptions.dtd">
%danbooruUpOptionsDTD;
]>

<overlay xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
	<prefpane id="danbooruUpDanbooruPane" label="&danbooruUpOptions.danbooruTab.label;" onpaneload="setTimeout(function() initDanbooruPane(), 0);">
	<preferences>
	</preferences>
	<stringbundle id="bundleDanbooruOptions" src="chrome://danbooruup/locale/danbooruUp.properties"/>
	<script type="application/x-javascript"><![CDATA[
var gDanbooruTree;
  var gDanbooruView = {
    _rowCount: 0,
    get rowCount()
    {
      return this._rowCount;
    },
    getCellText: function (aRow, aColumn)
    {
      //if (aColumn.id == "siteCol" || aColumn == "siteCol")
        return gDanbooruManager._danbooru[aRow].rawHost;
      //return "";
    },

    isSeparator: function(aIndex) { return false; },
    isSorted: function() { return false; },
    isContainer: function(aIndex) { return false; },
    setTree: function(aTree){},
    getImageSrc: function(aRow, aColumn) {},
    getProgressMode: function(aRow, aColumn) {},
    getCellValue: function(aRow, aColumn) {},
    cycleHeader: function(column) {},
    getRowProperties: function(row,prop){},
    getColumnProperties: function(column,prop){},
    getCellProperties: function(row,column,prop){}
  };

  function addDanbooru(aCapability)
  {
    var textbox = document.getElementById("url");
    var host = textbox.value.replace(/^\s*([-\w]*:\/+)?/, ""); // trim any leading space and scheme
    if (!host.length) return;

    try {
      var ioService = Components.classes["@mozilla.org/network/io-service;1"]
                                .getService(Components.interfaces.nsIIOService);
      var uri = ioService.newURI("http://"+host, null, null);
      host = uri.spec;
    } catch(ex) {
      var promptService = Components.classes["@mozilla.org/embedcomp/prompt-service;1"]
                                    .getService(Components.interfaces.nsIPromptService);
      var bundle = document.getElementById('bundleDanbooruOptions');
      var message = bundle.getString("danbooruUp.opt.invalidURI");
      var title = bundle.getString("danbooruUp.opt.error");
      promptService.alert(window, title, message);
      return;
    }

    // check whether the danbooru already exists, if not, add it
    var exists = false;
    for (let j=0; j<gDanbooruManager._danbooru.length; j++) {
      if (gDanbooruManager._danbooru[j].rawHost == host) {
        exists = true;
        break;
      }
    }

    if (!exists) {
      gDanbooruManager._addDanbooruToList(host);
      ++gDanbooruView._rowCount;
      gDanbooruTree.treeBoxObject.rowCountChanged(gDanbooruView.rowCount - 1, 1);
      // Re-do the sort, since we inserted this new item at the end.
      sortDanbooru(gDanbooruTree, gDanbooruView, gDanbooruManager._danbooru,
		      this._lastDanbooruSortColumn,
		      this._lastDanbooruSortAscending);
    }
    textbox.value = "";
    textbox.focus();

    // covers a case where the site exists already, so the buttons don't disable
    this.onHostInput(textbox);
  }

  function onHostInput(aSiteField)
  {
    document.getElementById("btnAdd").disabled = !aSiteField.value;
  }

  function onHostKeyPress(aEvent)
  {
    if (aEvent.keyCode == aEvent.DOM_VK_RETURN || aEvent.keyCode == aEvent.DOM_VK_ENTER ) {
      gDanbooruManager.addDanbooru();
      return false;
    }
  }

  // site list functions
  function onDanbooruSelected()
  {
    var hasSelection = gDanbooruTree.view.selection.count > 0;
    var hasRows = gDanbooruTree.view.rowCount > 0;
    document.getElementById("btnRemoveHost").disabled = !hasRows || !hasSelection;
  }

  function onDanbooruDeleted()
  {
    if (gDanbooruView.rowCount) {
      var removedDanbooru = [];
      this.deleteSelectedItems(gDanbooruTree, gDanbooruView, gDanbooruManager._danbooru, removedDanbooru);
    }
    var hasSelection = gDanbooruTree.view.selection.count > 0;
    document.getElementById("btnRemoveHost").disabled = (!gDanbooruManager._danbooru.length) || (gDanbooruTree.view.selection.count < 1);
  }

  function onDanbooruKeyPress(aEvent)
  {
    if (aEvent.keyCode == aEvent.DOM_VK_DELETE)
      this.onDanbooruDeleted();
  }

  var gLastDanbooruSortColumn = "";
  var gLastDanbooruSortAscending = false;

  function onDanbooruSort(aColumn)
  {
    gLastDanbooruSortAscending = sortDanbooru(gDanbooruTree,
		    gDanbooruView,
		    gDanbooruManager._danbooru,
		    aColumn,
		    gLastDanbooruSortColumn,
		    gLastDanbooruSortAscending);
    gLastDanbooruSortColumn = aColumn;
  }

  function deleteSelectedItems(aTree, aView, aItems, aDeletedItems)
  {
    var selection = aTree.view.selection;
    selection.selectEventsSuppressed = true;

    var rc = selection.getRangeCount();
    for (var i = 0; i < rc; ++i) {
      var min = { }; var max = { };
      selection.getRangeAt(i, min, max);
      for (var j = min.value; j <= max.value; ++j) {
        aDeletedItems.push(aItems[j]);
        aItems[j] = null;
      }
    }

    var nextSelection = 0;
    for (i = 0; i < aItems.length; ++i) {
      if (!aItems[i]) {
        var j = i;
        while (j < aItems.length && !aItems[j])
          ++j;
        aItems.splice(i, j - i);
        nextSelection = j < aView.rowCount ? j - 1 : j - 2;
        aView._rowCount -= j - i;
        aTree.treeBoxObject.rowCountChanged(i, i - j);
      }
    }

    if (aItems.length) {
      selection.select(nextSelection);
      aTree.treeBoxObject.ensureRowIsVisible(nextSelection);
      aTree.focus();
    }
    selection.selectEventsSuppressed = false;
  }

  function sortDanbooru(aTree, aView, aDataSet, aColumn, aLastSortColumn, aLastSortAscending)
  {
    var ascending = (aColumn == aLastSortColumn) ? !aLastSortAscending : true;
    aDataSet.sort(function (a, b) { return a[aColumn].toLowerCase().localeCompare(b[aColumn].toLowerCase()); });
    if (!ascending)
      aDataSet.reverse();

    aTree.view.selection.select(-1);
    aTree.view.selection.select(0);
    aTree.treeBoxObject.invalidate();
    aTree.treeBoxObject.ensureRowIsVisible(0);

    return ascending;
  }

function initDanbooruPane()
{
    gDanbooruTree = document.getElementById("danbooruTree");
    gDanbooruView._rowCount = gDanbooruManager._danbooru.length;

    gDanbooruTree.treeBoxObject.view = gDanbooruView;
    onDanbooruSort("rawHost", false);
}
	]]>
	</script>
		<vbox align="start" id="dTBox" flex="1">
			<description id="danbooruText">&danbooruUpOptions.danbooruText;</description>
		</vbox>
		<separator class="thin"/>
		<label control="url" value="&danbooruUpOptions.posturi.label;"/>
		<hbox align="center">
			<textbox id="url" flex="1"
				 accesskey="&danbooruUpOptions.posturi.accesskey;"
				 oninput="gDanbooruManager.onHostInput(event.target);"
				 onkeypress="return onHostKeyPress(event);"/>
		</hbox>
		<hbox align="center" pack="end">
			<button id="btnAdd" disabled="true" label="&danbooruUpOptions.add.label;" default="true"
				oncommand="addDanbooru();"/>
		</hbox>
		<separator class="thin"/>
		<vbox>
			<tree id="danbooruTree" flex="1"
			      hidecolumnpicker="true"
			      onkeypress="onDanbooruKeyPress(event);"
			      onselect="onDanbooruSelected();">
				<treecols>
					<treecol id="siteCol" label="&danbooruUpOptions.treehead.sitename.label;" flex="3"
						 onclick="onDanbooruSort('rawHost');"/>
				</treecols>
				<treechildren/>
			</tree>
			<separator class="thin"/>
			<hbox class="actionButtons" flex="1">
				<button id="btnRemoveHost" disabled="true"
					label="&danbooruUpOptions.removedanbooru.label;"
					oncommand="onDanbooruDeleted();"/>
				<spacer flex="1"/>
			</hbox>
		</vbox>
		<spacer flex="1"/>
	</prefpane>
</overlay>
