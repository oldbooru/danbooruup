/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2001
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Joe Hewitt <hewitt@netscape.com> (Original Author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "nsIInterfaceRequestor.idl"
#include "danbooruISearchCallback.idl"

[scriptable, uuid(4d39eff7-397a-4a14-be57-b5e472760ecd)]
interface danbooruITagHistoryService : nsISupports
{
  /**
   * The total number of rows in the tag history.
   */
  readonly attribute unsigned long rowCount;

  /**
   * The highest ID in the tag database.
   */
  readonly attribute unsigned long maxID;

  /**
   * Scriptable manual search for related tags.
   */
  boolean searchRelatedTags(in AString tagname, in danbooruISearchCallback callback);

  /**
   * AutoCompleteController-called tag search.
   */

  void autocompleteSearch(in AString query,
                                  in nsIVariant acontext,
                                  in danbooruISearchCallback callback);

  /**
   * Update the tag database from a given XML source.
   * @param aXmlURI The URI from which to retrieve tags from.
   * @param insert True if retrieving tags for insertion, false if retrieving tags for clean up.
   */
  void updateTagListFromURI(in AString aXmlURI, in nsIInterfaceRequestor notification);

  /**
   * Add a list of tags to a list of contexts in the tag history.
   * Returns false if some tags were not found.
   */
  boolean updateTagHistory(in nsIVariant tags, in nsIVariant acontext);

  /**
   * Remove all tags.
   */
  void clearTags();

  /**
   * Clear tagging history.
   */
  void clearHistory();
};

